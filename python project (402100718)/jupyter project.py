# -*- coding: utf-8 -*-
"""Untitled25.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1648jG0LBokQoRJsxG4cKq2zrG8x0XMHP
"""

!pip install matplotlib seaborn pandas numpy#type your code here...
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns#type your code here...
data = pd.read_csv('housePrice.csv')
df = pd.DataFrame(data)#type your code here...
dimention = df.shape
rows = dimention[0]
columns = dimention[1]
print(f"({rows}, {columns})")#type your code here...
print(df)#type your code here...
print(df.head(n=10))#type your code here...
print(df.tail(n=10))#type your code here...
from random import sample
sampl_df = df.sample(n=10)#type your code here...
print(df.info())
#type your code here...
print(df.describe())#type your code here...
empty_sells = df.isna().sum()
print(empty_sells)#type your code here...
df = df.dropna()#type your code here...
print(df.dtypes)#type your code here...
df["Area"] = pd.to_numeric(df["Area"], errors='coerce')
df["Price"] = pd.to_numeric(df["Price"], errors='coerce')
df["Pricr(USD)"] = pd.to_numeric(df["Price(USD)"], errors='coerce')#type your code here...
bool_columns = df.select_dtypes(include=bool).columns
df[bool_columns] = df[bool_columns].astype(int)
df.replace({True: 1, False: 0}, inplace=True)#type your code here...
df_T = df.describe()
print(df_T)#type your code here...
column_names = df.columns.tolist() #type your code here...
column_dict = df.columns.to_series().to_dict()
Pascal_case_dict = {key: value.title() for key, value in column_dict.items()}#type your code here...
for a in column_names :
    if len(a) < 8 :
        print(a)#type your code here...
for word in df.columns :
    if "-" in word :
        print(word)#type your code here...
df.columns = Pascal_case_dict#type your code here...
df_without_price = df.drop("Price", axis=1)#type your code here...
print(df_without_price)#type your code here...
df_with_3columns = df.loc[:, ["Area", "Room", "Price"]]
print(df_with_3columns)#type your code here...
new_df = df.loc[df.index%2 == 0,:]
print(new_df)#type your code here...
new_dict = dict(df.nunique())
print(new_dict)#type your code here...
discret_column = df["Address"]
discret_dict = discret_column.unique().tolist()
print(discret_dict)#type your code here...
discret_value_dict = {}
for item in df.columns :
    discret_value_dict[item] = list(df[item].unique())
print(discret_value_dict)#type your code here...
special_column = data["Address"]
count_value = special_column.value_counts()
#type your code here...
check_columns = df.select_dtypes(include=["int" , "float"])
find_range = check_columns.describe().loc[["min" , "max"]]
print(find_range)#type your code here...
quantity = df["Area"].quantile(0.25)
less_than_first_quarter = df[df["Area"] < quantity]
print(less_than_first_quarter)
#type your code here...
a = ["Area" , "Room" , "Price"]
for x in a :
    column_name = x
    quantity = df[column_name].quantile(0.25)
    less_than_first_quarter = df[df[column_name] < quantity]
    print(less_than_first_quarter)#type your code here...
df_sorted_by_price = df.sort_values(by="Price")
print(df_sorted_by_price)#type your code here...
df_reverse = df.iloc[::-1]
print(df_reverse)#type your code here...
find = df.loc[df["Elevator"] == True]
sorted_by_price = find.sort_values(by="Price")
print(sorted_by_price)#type your code here...
grouped_dataframe = df.groupby("Address")["Area"].sum()
print(grouped_dataframe)#type your code here...
grouped_df = df.groupby("Address").aggregate({"Area" : "mean"})
print(grouped_df)#type your code here...
cross_tab = pd.crosstab(df["Room"], df["Parking"])
print(cross_tab)
#type your code here...
cross_tab1 = pd.crosstab(df["Room"], df["Warehouse"])
print(cross_tab1)#type your code here...
cross_tab2 = pd.crosstab(df["Room"], df["Elevator"])
print(cross_tab2)#type your code here...
mean_price = df.groupby("Room")["Price"].mean()
print(mean_price)#type your code here...
mean_twice_price = df.groupby(["Room","Parking"])["Price"].aggregate(mean="mean")
print(mean_twice_price)#type your code here...
def calculate_sum(row) :
    return row["Parking"] + row["Warehouse"] + row["Elevator"]
df["Score"] = df.apply(calculate_sum, axis=1)#type your code here...
def calculate_percentage(row) :
    if row["Area"] < 100 :
        return row["Parking"]
    else :
        return None
df["percentage"] = df.apply(calculate_percentage, axis=1)
building_percentage = df["percentage"].sum() / df["percentage"].count() * 100
print(building_percentage)#type your code here...
dataframe_lenghth = len(data)
calculate_feature = len(data.query("Parking == True | Warehouse == True | Elevator == True"))
percentage = calculate_feature / dataframe_lenghth * 100
print(percentage)#type your code here
show_rows = df.loc[(df["Room"] > 2) & ((df["Parking"] == True) | (df["Elevator"] == True) | (df["Warehouse"] == True))]
print(show_rows)#type your code here...
show_buildings = df.loc[((df["Room"] > 2) & (df["Room"] < 4)) & (df["Parking"] == True)]
print(show_buildings)#type your code here...
df["Price_per_Area"] = df["Price"] / df["Area"]
df = df.sort_values(by = "Price_per_Area")
find_address = df.head(50)["Address"].to_list()
print(find_address)#type your code here...
plt.scatter(df["Price"], df["Area"])
plt.title("scatter plot of Price-Area")
plt.xlabel("Price")
plt.ylabel("Area")
plt.xlim(10000,100000)
plt.ylim(40,250)
plt.show()#type your code here...
plt.scatter(df["Price"], df["Area"], color="yellow")
plt.title("scatter plot of Price-Area")
plt.xlabel("Price")
plt.ylabel("Area")
plt.xlim(10000,100000)
plt.ylim(40,250)
plt.show()#type your code here...
plt.scatter(df["Price"], df["Area"], marker="*", linestyle="-", color="yellow")
plt.title("scatter plot of Price-Area")
plt.xlabel("Price")
plt.ylabel("Area")
plt.xlim(10000,100000)
plt.ylim(40,250)
plt.show()#type your code here...
plt.scatter(df["Price"], df["Room"], marker="*", linestyle="-", color="red")
plt.title("scatter plot of Price-Room")
plt.xlabel("Price")
plt.ylabel("Room")
plt.xlim(10000,100000)
plt.ylim(1,5)
plt.show()#type your code here...
plt.scatter(df["Price"], df["Score"])
plt.title("scatter plot of Price-Score")
plt.xlabel("Price")
plt.ylabel("Score")
plt.xlim(10000,100000)
plt.ylim(0,3)
plt.show()#type your code here...
plt.hist(df["Price"], bins=30)
plt.title("Frequency of Distribution Price")
plt.xlabel("Price")
plt.ylabel("Frequency")
plt.show()#type your code here...
plt.hist(df["Price"], bins=30, density=True, alpha=0.5, label="Frequency")
sns.kdeplot(df["Price"], color="green", label="KDE")
plt.title("Frequency of Distribution Price")
plt.xlabel("Price")
plt.ylabel("Density")
plt.legend()
plt.show()#type your code here...
sns.pairplot(df, kind="kde")
plt.show()#type your code here...
correlation_matrix = df.corr()
plt.figure(figsize=(8,8))
sns.heatmap(correlation_matrix, annot=True, cmap="Coolwarm")
plt.title("Heatmap of Corralation Matrix")
plt.show()#type your code here...
correlation_matrix = df.corr()
plt.figure(figsize=(8,8))
sns.heatmap(correlation_matrix, annot=True, cmap="RdYlGn")
plt.title("Heatmap of Corralation Matrix")
plt.show()#type your code here...#type your code here...#type your code here...#type your code here...#type your code here...
plt.hist(df["Room"], bins=4, color="red", edgcolor="black")
plt.title("Histogram of Rooms")
plt.xlabel("Room")
plt.ylabel("Frequency")
plt.show()#type your code here...
plt.hist(df["Warehouse"], df["Elevator"], df["Parking"], bins=2, color=["red", "yellow", "skyblue"], label=["Warehouse", "Elevator", "Parking"])
plt.title("Describtion of DataFrame")
plt.xlabel("Value")
plt.ylabel("Frequency")
plt.legend()
plt.show()#type your code here...#type your code here...#type your code here...#type your code here...#type your code here...#type your code here...#type your code here...#type your code here...
price_by_room = df.groupby("Room")["Price"].mean()
room_numbers = len(price_by_room)
plt.bar(range(room_numbers), price_by_room, algin="center", color="purple", alpha=0.6)
plt.xticks(range(room_numbers), price_by_room.index)
plt.title("Price Barplot of Room")
plt.xlabel("Room")
plt.ylabel("Mean Price")
plt.show()